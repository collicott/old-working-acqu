//--Author	C Collicott   14th Nov 2004   Most Basic Form
//
// PDG codes of particles generlly observed MAMI-C
// kElectron 11,     kPositron -11
// kMuonMinus 13     kMuonPlus -13      kGamma 22
// kPi0 111          kPiPlus 211        kPiMinus -211       kEta 221
// kProton 2212      kNeutron 2112
// 

#ifndef __TA2Trigger_h__
#define __TA2Trigger_h__

#include "TAcquRoot.h"
#include "TAcquFile.h"
#include "TA2Physics.h"
#include "TA2Analysis.h"
#include "TA2Tagger.h"
//#include "TA2CB.h"
#include "TA2CentralApparatus.h"
//#include "TA2Taps.h"
#include "TA2CrystalBall.h"
#include "TA2TAPS2009.h"
#include "TA2Ladder.h"
#include "TA2PhotoPhysics.h"
#include "TROOT.h"
#include "TFile.h"
#include "TTree.h"
#include "TBrowser.h"
#include "TH2.h"
#include "TRandom.h"
#include <iostream>

class TA2Tagger;

class TA2Trigger : public TA2Physics {

	protected:

// Begin by initialising Detectors
	TA2Tagger*		fTAGG;	// Glasgow photon tagger
	TA2Ladder*		fLADD;	// Ladder
      //TA2CentralApparatus*	fCAPP;	// Central Apparatus
	TA2CrystalBall*		fCAPP;	// CB  

      //TA2Taps*		fTAPS;  // TAPS
	TA2TAPS2009* 		fTAPS;  // TAPS

	TA2CalArray		*fNaI;	// NaI 
	TA2CylMwpc		*fMWPC;	// Mwpc
	TA2PlasticPID		*fPID;	// Pid

	TA2TAPS_BaF2		*fBaF2;  // BaF2
	TA2PlasticPID		*fVeto; // TAPS Vetos

// Tree Files
	TFile* 	fTriggerFile;
	TTree* 	fTriggerTree;

// Cristina Class Variables

	Int_t		a,b,h,i,j,k,m,n;
	Int_t		c1;

	UInt_t 		fBasicVariable;		
	Int_t*		fBasicArray;

	Int_t		fNaINHits;
	Int_t		fPIDNHits;
	Int_t		fBaF2NHits;
	Int_t		fVetoNHits;

	Int_t*		fNaIHits;
	Int_t*		fPIDHits;
	Int_t*		fBaF2Hits;
	Int_t*		fVetoHits;

	Int_t		fNaINCluster;
	Int_t		fBaF2NCluster;

	Int_t*		fNaIClusters;
	Int_t*		fNaIClustersNHits;
	Double_t*	fNaIClustersEnergy;

	Int_t*		fBaF2Clusters;
	Int_t*		fBaF2ClustersNHits;
	Double_t*	fBaF2ClustersEnergy;

	Int_t		fPhiIndex;
	Int_t		fPhiIndexMin;
	Int_t		fPhiIndexMax;

	Int_t*		fNaIPhiIndex;
	Int_t*		fBaF2PhiIndex;
	const Int_t	fPIDPhiIndex[24];
	const Int_t	fPIDPhiIndexMin[24];
	const Int_t	fPIDPhiIndexMax[24];
	Int_t*		fVetoPhiIndex;

	Int_t*  	ChargedI;
	Int_t*  	ChargedIMin;
	Int_t*  	ChargedIMax;
	Int_t 		NCharged;

	Int_t*  	NeutralI;
	Int_t 		NNeutral;

	Int_t		fMultiplicity;
	Double_t	fEnergySumCB;

	Int_t		fNTrigger;
	Int_t		fNPattern;
	Int_t* 		fTriggerPattern;
	
	Bool_t  	fOneNegative;
	Bool_t		fTrigNeutCoplanarM2;
	Bool_t		fTrigNeutCoplanarCTrackM2;


// Particle Information

	UInt_t 		fCAPPMaxNParticle; 	// Max# Particle from CentApp
	UInt_t		fTAPSMaxNParticle; 	// Max# Particle from TAPS 
	UInt_t 		fMaxNParticle;		// Max # Particle (CB + TAPS)

	TA2Particle* 	fCAPPParticles;	   	// TA2CentApp Particles
	TA2Particle* 	fTAPSParticles;	   	// TA2Particles from TAPS

	UInt_t 		fCAPPNParticle;    	// # Particle from CentApp
	UInt_t		fTAPSNParticle;    	// # Particle from TAPS
	UInt_t 		fNParticle;		// # of Particles (CB + TAPS)

	TA2Particle** 	fPhoton; 		// Array to hold photons	
	TA2Particle** 	fProton;		// Array to hold protons

	UInt_t 		fNPhoton;		// # of Photons
	UInt_t 		fNProton;		// # of Protons

	Double_t*	fPhotonEnergy;		// Energy of all photons
	Double_t*	fPhotonTheta;		// Theta of all photons
	Double_t*	fPhotonPhi;		// Phi of all photons
	Double_t*	fPhotonTime;		// Time of all photons

	Double_t*	fProtonEnergy;		// Energy of all protons
	Double_t*	fProtonTheta;		// Theta of all protons
	Double_t*	fProtonPhi;		// Phi of all protons
	Double_t*	fProtonTime;		// Time of all protons


	public:

	TA2Trigger( const char*, TA2Analysis* );
		virtual ~TA2Trigger();
		virtual void LoadVariable();	// variables for display/cuts
		virtual void PostInit( );	// init after parameter input
		virtual void SetConfig(Char_t*, Int_t);
		virtual void Reconstruct();	// reconstruct detector info
		virtual TA2DataManager* CreateChild( const char*, Int_t ){ return NULL;}
		virtual void CloseTrees();
	ClassDef(TA2Trigger,1)
};

// ----------------------------------------------------------------------------

inline void TA2Trigger::CloseTrees() {

    fTriggerFile->cd();
    fTriggerTree->Write();
    fTriggerFile->Close();

}	

#endif
